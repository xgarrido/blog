{
  
    
        "post0": {
            "title": "Plotly Library within fastpages",
            "content": "There have been attempts to make Plotly Python working with fastpages (see for instance, this blog post or this discussion). I have not been able to make Plotly working this way. Moreover I did&#39;nt want to change my jupyter notebooks to take in mind that it will be latter converted by fastpages: basically, I want my jupyter to be rendered by fastpages without hacking. . By looking how the Plotly charts were rendered by the html pages of https://plotly.com/python website, I finally found a way to keep the code unchanged by just adding the minimal javascript configuration in the Jekyll part. The solution is to add several lines into the _includes/custom-head.html file in such a way the minimal set of javascript plugins is loaded for Plotly. Here are the lines . . {% if page.use_plotly %} &lt;script type=&quot;text/javascript&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.2/require.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; if (typeof require !== &#39;undefined&#39;) { require.undef(&quot;plotly&quot;); requirejs.config({ paths: { &#39;plotly&#39;: [&#39;https://cdn.plot.ly/plotly-latest.min&#39;] } }); require([&#39;plotly&#39;], function(Plotly) { window._Plotly = Plotly; }); } &lt;/script&gt; {% endif %} . . The block itself is wrapped and is only loaded if you add use_plotly: true on top of your notebook (see https://github.com/fastai/fastpages#customizing-blog-posts-with-front-matter). . . Let&#39;s play with Plotly and the gapminder data set . import plotly.express as px gapminder = px.data.gapminder() gapminder.head() . We can for example make a violin plot showing how the life expectancy change from one continent to another. . fig = px.violin( gapminder, x=&quot;continent&quot;, y=&quot;lifeExp&quot;, color=&quot;continent&quot;, labels={&quot;lifeExp&quot;: &quot;life expectancy at birth&quot;}, ) fig.update_layout(showlegend=False) . We can even use the animation layer of Plotly . px.scatter( gapminder, x=&quot;gdpPercap&quot;, y=&quot;lifeExp&quot;, animation_frame=&quot;year&quot;, animation_group=&quot;country&quot;, size=&quot;pop&quot;, color=&quot;continent&quot;, hover_name=&quot;country&quot;, log_x=True, size_max=55, range_x=[100, 100000], range_y=[25, 90], labels={ &quot;lifeExp&quot;: &quot;life expectancy at birth&quot;, &quot;gdpPercap&quot;: &quot;per-capita gross domestic product in dollars&quot;, }, ) . Lastly, we can produce nice geographical charts . import pandas as pd import plotly.graph_objects as go df = pd.read_csv(&quot;https://raw.githubusercontent.com/plotly/datasets/master/2014_us_cities.csv&quot;) df[&quot;text&quot;] = df[&quot;name&quot;] + &quot;&lt;br&gt;Population &quot; + (df[&quot;pop&quot;] / 1e6).astype(str) + &quot; million&quot; fig = go.Figure() limits = [(0, 2), (3, 10), (11, 20), (21, 50), (50, len(df))] for i, limit in enumerate(limits): df_sub = df[limit[0] : limit[1]] fig.add_trace( go.Scattergeo( locationmode=&quot;USA-states&quot;, lon=df_sub[&quot;lon&quot;], lat=df_sub[&quot;lat&quot;], text=df_sub[&quot;text&quot;], marker=dict( size=df_sub[&quot;pop&quot;] / 5000, line_color=&quot;rgb(40,40,40)&quot;, line_width=0.5, sizemode=&quot;area&quot;, ), name=&quot;&quot;, ) ) fig.update_layout( title_text=&quot;2014 US city populations&quot;, showlegend=False, geo=dict(scope=&quot;usa&quot;, landcolor=&quot;rgb(217, 217, 217)&quot;), ) .",
            "url": "https://xgarrido.github.io/blog/jupyter/plotly/2021/01/18/plotly.html",
            "relUrl": "/jupyter/plotly/2021/01/18/plotly.html",
            "date": " • Jan 18, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Noisy Planet",
            "content": "I recently came across this interesting post and I wanted to replicate the whole thing in python within a jupyter notebook. . Let&#39;s start by correctly generating random positions within a disk (the original post missed the right way to do it as explained here). We then plot them in polar coordinates. . import numpy as np npoints = 1000 radius = 10 r = np.sqrt(np.random.rand(npoints)) * radius theta = np.random.rand(npoints) * 2 * np.pi import matplotlib.pyplot as plt fig, ax = plt.subplots(subplot_kw={&quot;projection&quot;: &quot;polar&quot;}, figsize=(8, 8)) ax.plot(theta, r, &quot;o&quot;, alpha=0.5); . Given this set of initial point, we will generate random trajectories using Perlin noise. Despite this kind of noise seems not to be coded within numpy or scipy, there are python packages to do it and we will install and use the following one . !pip install perlin-noise . Let&#39;s write a function to return a bunch of trajectories cutting each of them when the next point is outside the planet. . from perlin_noise import PerlinNoise def generate_noisy_planet(npoints=1000, radius=10, step=0.1, seed=None): np.random.seed(seed) noise = PerlinNoise(octaves=4, seed=seed) trajectories = [] for i in range(npoints): r = np.sqrt(np.random.rand()) * radius theta = np.random.rand() * 2 * np.pi x, y = r * np.cos(theta), r * np.sin(theta) trajectory = [] while np.hypot(x, y) &lt; radius: trajectory += [[x, y]] n = noise([x / 100, y / 100]) fx = np.sin if n &gt; 0.5 else np.cos fy = np.cos if n &gt; 0.5 else np.sin x += fx(n * 2 * np.pi) * step y += fy(n * 2 * np.pi) * step trajectories += [np.array(trajectory)] return trajectories . Finally let&#39;s plot them in cartesian coordinates . trajectories = generate_noisy_planet() fig, ax = plt.subplots(figsize=(8, 8)) ax.axis(&quot;equal&quot;) ax.axis(&quot;off&quot;) cmap = plt.get_cmap(&quot;Greys&quot;, len(trajectories)) for i, trajectory in enumerate(trajectories): plt.plot(trajectory[:, 0], trajectory[:, 1], color=cmap(i)) . And here are some nice examples of noisy planets . seeds = [20, 52, 666] cmaps = [&quot;Reds&quot;, &quot;Greens&quot;, &quot;Blues&quot;] fig, axes = plt.subplots(ncols=3, figsize=(24, 8)) for i, seed in enumerate(seeds): axes[i].axis(&quot;equal&quot;) axes[i].axis(&quot;off&quot;) trajectories = generate_noisy_planet(seed=seed) cmap = plt.get_cmap(cmaps[i], len(trajectories)) for j, trajectory in enumerate(trajectories): axes[i].plot(*trajectory.T, color=cmap(j)) . Just like the original post, we finally create a gif file for the latest evil planet (seed=666) . import os tmp_fig = &quot;/tmp/planets&quot; os.makedirs(tmp_fig, exist_ok=True) plt.figure(figsize=(8, 8)) min_time = 0 max_time = np.max([len(trajectory) for trajectory in trajectories]) for t in range(min_time, max_time): plt.axis(2 * [-radius, +radius]) plt.axis(&quot;off&quot;) for i, trajectory in enumerate(trajectories): tlim = min(t, len(trajectory)) plt.plot(trajectory[:tlim, 0], trajectory[:tlim, 1], color=cmap(i)) plt.savefig(os.path.join(tmp_fig, &quot;planet_{:03d}.png&quot;.format(t))) plt.clf(); . and the process conversion using ImageMagick . import subprocess subprocess.run( [ &quot;convert&quot;, &quot;-background&quot;, &quot;white&quot;, &quot;-alpha&quot;, &quot;remove&quot;, &quot;-layers&quot;, &quot;optimize&quot;, &quot;-delay&quot;, &quot;10&quot;, &quot;-loop&quot;, &quot;0&quot;, tmp_fig + &quot;/*.png&quot;, &quot;./images/animation.gif&quot;, ] ); . .",
            "url": "https://xgarrido.github.io/blog/jupyter/planet/perlin%20noise/2021/01/15/noisy-planet.html",
            "relUrl": "/jupyter/planet/perlin%20noise/2021/01/15/noisy-planet.html",
            "date": " • Jan 15, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://xgarrido.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
      ,"page9": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://xgarrido.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}